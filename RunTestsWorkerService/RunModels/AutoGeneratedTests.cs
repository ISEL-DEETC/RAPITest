using ModelsLibrary.Models.AppSpecific;
using RunTestsWorkerService.Utils;
using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.EntityFrameworkCore;
using ModelsLibrary.Models;
using ModelsLibrary.Models.EFModels;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using Microsoft.AspNetCore.WebUtilities;
using System.Diagnostics;
using Serilog;
using ModelsLibrary.Models.Language;

namespace RunTestsWorkerService.RunModels
{
	class AutoGeneratedTests
	{
		private List<Test> generatedTests;
		private HttpUtils httpUtils;

		public AutoGeneratedTests(List<Test> generatedTests, HttpUtils httpUtils)
		{
			this.generatedTests = generatedTests;
			this.httpUtils = httpUtils;
		}

		public async Task Run()
		{
			try
			{
				List<Task> tasks = new List<Task>();

				foreach (Test generatedTest in generatedTests)
				{
					ChangeVariablePathGenerated(generatedTest);
					HttpRequestMessage request = httpUtils.PrepareRequestMessage(generatedTest, generatedTest.Path);
					Task<HttpResponseMessage> task = httpUtils.Request(request);
					var sw = Stopwatch.StartNew();

					tasks.Add(task.ContinueWith(result =>
					{
						httpUtils.RunVerifications(generatedTest, result.Result);
						httpUtils.FillRequestMetadata(generatedTest, request, task.Result, sw.ElapsedMilliseconds);
					}));
				}

				await Task.WhenAll(tasks);
			}
			catch (Exception ex)
			{
				Log.Logger.Error(ex.Message);
				await Task.FromException(ex);
			}
		}

		private void ChangeVariablePathGenerated(Test test)
		{
			try
			{
				while (true)
				{
					bool found = false;
					if (test.Path.Contains("{"))
					{
						int start = test.Path.IndexOf("{");
						int end = test.Path.IndexOf("}");
						string var = test.Path.Substring(start + 1, end - start - 1);
						test.Path = test.Path.Replace("{" + var + "}", new Random().Next(10).ToString());
						found = true;
					}
					if (!found) break;
				}
			}
			catch (Exception ex)
			{
				Log.Logger.Error(ex.Message);
			}
		}
	}
}
